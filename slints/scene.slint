import { Slider, GroupBox, HorizontalBox, VerticalBox, GridBox, Button } from "std-widgets.slint";

export component App inherits Window {
    in property <image> texture <=> image.source;
    out property <int> requested-texture-width: image.width / 1phx;
    out property <int> requested-texture-height: image.height / 1phx;
    // Define the callback that will be implemented in Rust
    callback mouse_down_renderer(PointerEventButton);
    callback mouse_up_renderer(PointerEventButton);
    callback click_import_stl();
    callback translate_selected_bodies();

    callback zoom(length);
    callback mouse_move_renderer(length, length);

    title: "Amislicer";
    HorizontalBox {
        VerticalBox {
            width: 200px;
            Text {
                text: "Text";
                wrap: word-wrap;
            }

            Button {
                text: "Import STL";
                height: 200px;
                clicked => {
                    click_import_stl();
                }
            }
        }

        VerticalBox {
            min-width: 600px;
            min-height: 600px;
            image := Image {
                min-width: 600px;
                min-height: 600px;
                height: 100%;
                TouchArea {
                    scroll-event(e) => {
                        if e.delta-y > 0 {
                            root.zoom(e.delta-y);
                            return accept;
                        } else if e.delta-y < 0 {
                            root.zoom(e.delta-y);
                            return accept;
                        }
                        return reject;
                    }
                    pointer-event(event) => {
                        if (event.kind == PointerEventKind.move) {
                            mouse_move_renderer(self.mouse_x, self.mouse-y);
                        } else if (event.kind == PointerEventKind.down) {
                            mouse_down_renderer(event.button);
                        } else if (event.kind == PointerEventKind.up) {
                            mouse_up_renderer(event.button);
                        }
                    }
                }
            }
        }

        VerticalBox {
            width: 200px;
            Button {
                height: 100px;
                text: "Translate selected bodies";
                clicked => {
                    translate_selected_bodies();
                }
            }
        }
    }
}
