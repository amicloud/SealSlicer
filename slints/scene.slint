import { Slider, GroupBox, HorizontalBox, VerticalBox, GridBox, Button, ScrollView, TextEdit, LineEdit, ListView } from "std-widgets.slint";
import {ObjectListItem} from "object_list_item.slint";
struct BodyUI {
    name: string,
    enabled: bool,
    visible: bool,
    uuid: string,
    selected: bool,
    p_x: string,
    p_y: string,
    p_z: string,
    r_i: string,
    r_j: string,
    r_k: string,
    r_w: string,
    s_x: string,
    s_y: string,
    s_z: string,
}

export component App inherits Window {
    in property <image> texture <=> image.source;
    in property <[BodyUI]> bodies;
    out property <int> requested-texture-width: image.width / 1phx;
    out property <int> requested-texture-height: image.height / 1phx;
    // Define the callback that will be implemented in Rust
    callback mouse_down_renderer(PointerEventButton);
    callback mouse_up_renderer(PointerEventButton);
    callback click_import_stl();
    callback translate_selected_bodies();
    callback body_position_edited_single_axis(string, float, int);
    callback body_rotation_edited(string, float, float, float);
    callback body_scale_edited(string, float, float, float);
    callback toggle_body_selected(string); //uuid


    callback zoom(length);
    callback mouse_move_renderer(length, length);

    title: "Amislicer";
    HorizontalBox {
        VerticalBox {
            width: 200px;
            Text {
                text: "Text";
                wrap: word-wrap;
            }

            Button {
                text: "Import STL";
                height: 200px;
                clicked => {
                    click_import_stl();
                }
            }
        }

        VerticalBox {
            min-width: 600px;
            min-height: 600px;
            image := Image {
                min-width: 600px;
                min-height: 600px;
                height: 100%;
                TouchArea {
                    scroll-event(e) => {
                        if e.delta-y > 0 {
                            root.zoom(e.delta-y);
                            return accept;
                        } else if e.delta-y < 0 {
                            root.zoom(e.delta-y);
                            return accept;
                        }
                        return reject;
                    }
                    pointer-event(event) => {
                        if (event.kind == PointerEventKind.move) {
                            mouse_move_renderer(self.mouse_x, self.mouse-y);
                        } else if (event.kind == PointerEventKind.down) {
                            mouse_down_renderer(event.button);
                        } else if (event.kind == PointerEventKind.up) {
                            mouse_up_renderer(event.button);
                        }
                    }
                }
            }
        }

        VerticalBox {
            VerticalBox {
                height: 300px;
                width: 300px;
                ObjectListItem { 
                    name: bodies[0].name;
                    uuid: bodies[0].uuid;
                    enabled: bodies[0].enabled;
                    is_visible: bodies[0].visible;
                    selected: bodies[0].selected;
                    p_x: bodies[0].p_x;
                    p_y: bodies[0].p_y;
                    p_z: bodies[0].p_z;
                    r_i: bodies[0].r_i;
                    r_j: bodies[0].r_j;
                    r_k: bodies[0].r_k;
                    r_w: bodies[0].r_w;
                    s_x: bodies[0].s_x;
                    s_y: bodies[0].s_y;
                    s_z: bodies[0].s_z;
                    body_position_edited_single_axis(string, float, int) => {
                        body_position_edited_single_axis(string, float, int);
                    }
                    toggle_body_selected(string) => {
                        toggle_body_selected(string);
                    }
                }
            }
                // ListView{

                    // why can i not use a `for in bodies` loop wtf why is it not working? I have to do some stupid shit
                    // like even if I just do `for i in bodies.length` then nothing in the for loop responds to user input
                    // TODO: fix this crap
                //     for i in [0,1]:  ObjectListItem { 
                //         name: bodies[i].name;
                //         uuid: bodies[i].uuid;
                //         enabled: bodies[i].enabled;
                //         is_visible: bodies[i].visible;
                //         selected: bodies[i].selected;
                //         p_x: bodies[i].p_x;
                //         p_y: bodies[i].p_y;
                //         p_z: bodies[i].p_z;
                //         r_i: bodies[i].r_i;
                //         r_j: bodies[i].r_j;
                //         r_k: bodies[i].r_k;
                //         r_w: bodies[i].r_w;
                //         s_x: bodies[i].s_x;
                //         s_y: bodies[i].s_y;
                //         s_z: bodies[i].s_z;
                //         body_position_edited(string, float, float, float) => {
                //             body_position_edited(string, float, float, float);
                //         }
                //         toggle_body_selected(string) => {
                //             toggle_body_selected(string);
                //         }
                //     }
                // }
            // }

            Button {
                height: 100px;
                text: "Translate selected bodies";
                clicked => {
                    translate_selected_bodies();
                }
            }
        }
    }
}
